{
    /**
     * The application's namespace.
     */
    "name": "Neptune",

    /**
     * The version of the application.
     */
    "version": "1.0.0.0",

    /**
     * The relative path to the application's markup file (html, jsp, asp, etc.).
     */
    "indexHtmlPath": "index.html",

    /**
     * Comma-separated string with the paths of directories or files to search. Any classes
     * declared in these locations will be available in your class "requires" or in calls
     * to "Ext.require". The "app.dir" variable below is expanded to the path where the
     * application resides (the same folder in which this file is located).
     */
    "classpath": "app,${toolkit.name}/src",

    /**
     * Comma-separated string with the paths of directories or files to search. Any classes
     * declared in these locations will be automatically required and included in the build.
     * If any file defines an Ext JS override (using Ext.define with an "override" property),
     * that override will in fact only be included in the build if the target class specified
     * in the "override" property is also included.
     */
    "overrides": "overrides,${toolkit.name}/overrides",

    /**
     * The Sencha Framework for this application: "ext" or "touch".
     */
    "framework": "ext",

    /**
     * The toolkit to use. Select either "classic" or "modern".
     */

    "toolkit": "classic",


    /**
     * The name of the theme for this application.
     */


    "theme": "theme-neptune",


    /**
     * The list of required packages (with optional versions; default is "latest").
     *
     * For example,
     *
     *      "requires": [
     *          "charts"
     *      ]
     */
    "requires": [
    ],

    /**
     * Sass configuration properties.
     */
    "sass": {
        /**
         * The root namespace to use when mapping *.scss files to classes in the
         * sass/src and sass/var directories. For example, "Neptune.view.Foo" would
         * map to "sass/src/view/Foo.scss". If we changed this to "Neptune.view" then
         * it would map to "sass/src/Foo.scss". To style classes outside the app's
         * root namespace, change this to "". Doing so would change the mapping of
         * "Neptune.view.Foo" to "sass/src/Neptune/view/Foo.scss".
         */
        "namespace": "Neptune",

        /**
         * Comma-separated list of files or folders containing extra Sass. These
         * files are automatically included in the Sass compilation. By default this
         * is just "etc/all.scss" to allow import directives to control the order
         * other files are included.
         *
         * All "etc" files are included at the top of the Sass compilation in their
         * dependency order:
         *
         *      +-------+---------+
         *      |       | base    |
         *      | theme +---------+
         *      |       | derived |
         *      +-------+---------+
         *      | packages        |  (in package dependency order)
         *      +-----------------+
         *      | application     |
         *      +-----------------+
         */
        "etc": "sass/etc/all.scss,${toolkit.name}/sass/etc/all.scss",

        /**
         * Comma-separated list of folders containing Sass variable definitions
         * files. These file can also define Sass mixins for use by components.
         *
         * All "var" files are included after "etc" files in the Sass compilation in
         * roughly reverse dependency order:
         *
         *      +-----------------+
         *      | application     |
         *      +-------+---------+
         *      |       | derived |
         *      | theme +---------+
         *      |       | base    |
         *      +-------+---------+
         *      | packages        |  (in package dependency order)
         *      +-----------------+
         */
        "var": "sass/var,${toolkit.name}/sass/var",

        /**
         * Comma-separated list of folders containing Sass rule files.
         *
         * All "src" files are included after "var" files in the Sass compilation in
         * dependency order (the same order as "etc"):
         *
         *      +-------+---------+
         *      |       | base    |
         *      | theme +---------+
         *      |       | derived |
         *      +-------+---------+
         *      | packages        |  (in package dependency order)
         *      +-----------------+
         *      | application     |
         *      +-----------------+
         */
        "src": "sass/src,${toolkit.name}/sass/src"
    },

    /**
     * List of all JavaScript assets in the right execution order.
     *
     * Each item is an object with the following format:
     *
     *      {
     *          // Path to file. If the file is local this must be a relative path from
     *          // this app.json file.
     *          //
     *          "path": "path/to/script.js",   // REQUIRED
     *
     *          // Set to true on one file to indicate that it should become the container
     *          // for the concatenated classes.
     *          //
     *          "bundle": false,    // OPTIONAL
     *
     *          // Set to true to include this file in the concatenated classes.
     *          //
     *          "includeInBundle": false,  // OPTIONAL
     *
     *          // Specify as true if this file is remote and should not be copied into the
     *          // build folder. Defaults to false for a local file which will be copied.
     *          //
     *          "remote": false,    // OPTIONAL
     *
     *          // If not specified, this file will only be loaded once, and cached inside
     *          // localStorage until this value is changed. You can specify:
     *          //
     *          //   - "delta" to enable over-the-air delta update for this file
     *          //   - "full" means full update will be made when this file changes
     *          //
     *          "update": "",        // OPTIONAL
     *
     *          // A value of true indicates that is a development mode only dependency.
     *          // These files will not be copied into the build directory or referenced
     *          // in the generate app.json manifest for the micro loader.
     *          //
     *          "bootstrap": false   // OPTIONAL
     *      }
     */
    "js": [
        {
            "path": "app.js",
            "bundle": true
        }
    ],

    /**
     * List of all CSS assets in the right inclusion order.
     *
     * Each item is an object with the following format:
     *
     *      {
     *          // Path to file. If the file is local this must be a relative path from
     *          // this app.json file.
     *          //
     *          "path": "path/to/stylesheet.css",   // REQUIRED
     *
     *          // Specify as true if this file is remote and should not be copied into the
     *          // build folder. Defaults to false for a local file which will be copied.
     *          //
     *          "remote": false,    // OPTIONAL
     *
     *          // If not specified, this file will only be loaded once, and cached inside
     *          // localStorage until this value is changed. You can specify:
     *          //
     *          //   - "delta" to enable over-the-air delta update for this file
     *          //   - "full" means full update will be made when this file changes
     *          //
     *          "update": ""      // OPTIONAL
     *      }
     */
    "css": [
        {
            "path": "${build.out.css.dir}/Neptune-all.css",
            "bundle": true
        }
    ],

    /**
     * Used to automatically generate cache.manifest (HTML 5 application cache manifest) file when you build
     */
    "appCache": {
        /**
         * List of items in the CACHE MANIFEST section
         */
        "cache": [
            "index.html"
        ],
        /**
         * List of items in the NETWORK section
         */
        "network": [
            "*"
        ],
        /**
         * List of items in the FALLBACK section
         */
        "fallback": []
    },

    /**
     * Extra resources to be copied along when build
     */
    "resources": [
        {
            "path": "resources"
        }
    ],

    /**
     * File / directory name patttern to ignore when copying to the builds. Must be a
     * valid regular expression.
     */
    "ignore": [
        "(^|/)CVS(/?$|/.*?$)"
    ],

    /**
     * Directory path to store all previous production builds. Note that the content
     * generated inside this directory must be kept intact for proper generation of
     * deltas between updates.
     */
    "archivePath": "archive",

    /**
     * Additional resources used during theme slicing operations
     */
    "slicer": {
        "js": [
            {
                "path": "${app.dir}/sass/example/custom.js",
                "isWidgetManifest": true
            }
        ]
    },

    /**
     * override objects for setting build environment specific 
     * settings.
     */
    "production": {
        "output": {
            "appCache": {
                "enable": false
            }
        },
        "cache": {
            "enable": false
        }
    },

    "testing": {
    },

    "development": {
    },

    /**
     * Controls the name of the manifest file used by the microloader for
     * dev mode
     */
    "bootstrap": {
        "manifest": "${build.id}.json"
    },

    /**
     *  Controls the output directory for build resources.  May be set with
     *  either a string:
     *  
     *      outputDir: ""
     *  
     *  or an object containing 5 possible values for various types of 
     *  build artifacts:
     *  
     *  outputDir: {
     *      // this is the base of the output directory.  all other paths
     *      // are relative to this
     *      base: ""
     *      
     *      // output dir for the index.html and manifest.json files.
     *      // defaults to base
     *      page:".",
     *
     *      // output dir for compile js files.  
     *      // defaults to base
     *      js: ".",
     *      
     *      // output dir for compiled app css content.
     *      // defaults to "resources" under the base location
     *      css: "./resources",
     *      
     *      // output dir for all other page resources (images, etc.)
     *      // defaults to the css location
     *      resources: ""
     *  }
     *
     */
    "output": {
        "base": "${ext.dir}/build/examples/classic/neptune-components/${build.id}",
        "page": "../index.html",
        "manifest": "../${build.id}.json",
        "deltas": {
            "enable": false
        },
        "appCache": {
            "enable": false
        }
    },

    /**
     * Uniquely generated id for this application, used as prefix for localStorage keys.
     * Normally you should never change this value.
     */
    "id": "007fe7a8-a601-4922-806a-d1f70390f14c",

    "builds": {
        "neptune": {
            "theme": "theme-neptune"
        },
        "triton": {
            "theme": "theme-triton"
        },
        "classic": {
            "theme": "theme-classic"
        },
        "gray": {
            "theme": "theme-gray"
        }
    }
}
